/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/UESTC-KEEP/keep/cloud/pkg/apis/keepedge/equalnode/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EqualNodeLister helps list EqualNodes.
// All objects returned here must be treated as read-only.
type EqualNodeLister interface {
	// List lists all EqualNodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EqualNode, err error)
	// EqualNodes returns an object that can list and get EqualNodes.
	EqualNodes(namespace string) EqualNodeNamespaceLister
	EqualNodeListerExpansion
}

// equalNodeLister implements the EqualNodeLister interface.
type equalNodeLister struct {
	indexer cache.Indexer
}

// NewEqualNodeLister returns a new EqualNodeLister.
func NewEqualNodeLister(indexer cache.Indexer) EqualNodeLister {
	return &equalNodeLister{indexer: indexer}
}

// List lists all EqualNodes in the indexer.
func (s *equalNodeLister) List(selector labels.Selector) (ret []*v1alpha1.EqualNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EqualNode))
	})
	return ret, err
}

// EqualNodes returns an object that can list and get EqualNodes.
func (s *equalNodeLister) EqualNodes(namespace string) EqualNodeNamespaceLister {
	return equalNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EqualNodeNamespaceLister helps list and get EqualNodes.
// All objects returned here must be treated as read-only.
type EqualNodeNamespaceLister interface {
	// List lists all EqualNodes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EqualNode, err error)
	// Get retrieves the EqualNode from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EqualNode, error)
	EqualNodeNamespaceListerExpansion
}

// equalNodeNamespaceLister implements the EqualNodeNamespaceLister
// interface.
type equalNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EqualNodes in the indexer for a given namespace.
func (s equalNodeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EqualNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EqualNode))
	})
	return ret, err
}

// Get retrieves the EqualNode from the indexer for a given namespace and name.
func (s equalNodeNamespaceLister) Get(name string) (*v1alpha1.EqualNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("equalnode"), name)
	}
	return obj.(*v1alpha1.EqualNode), nil
}
