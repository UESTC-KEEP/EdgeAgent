syntax = "proto3";
package v1;
option go_package = "../../devices/v1";

// 生成仅包含结构体定义的go语言代码 protoc --go_out=../services/ prod.proto
// 生成定义了函数之后的go语言代码   protoc --go_out=plugins=grpc:../../devices/v1 api.proto
// 之前证书  密码1234            genrsa -des3 -out server.key 2048
// 生成证书请求                  req -new -key server.key -out server.csr
// 删除密码                     rsa -in server.key -out server_no_passwd.key
// 生成服务端证书                x509 -req -days 365 -in server.csr -signkey server_no_passwd.key -out server.crt

service DeviceService {
  rpc GetDeviceStatus(DeviceStatusRequest) returns(DeviceStatusResponse){}
}

message DeviceStatusRequest {
  string topic = 1;
}

message DeviceStatusResponse{
  DeviceStatus        status = 1;
  map<string, string> info   = 2;
}

message DeviceStatus{
  // 设备的所有参数形成map
  map<string, string> status = 1;
  map<string, string> info   = 2;
}
